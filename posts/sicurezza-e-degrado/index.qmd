---
title: "Sicurezza e stato di degrado delle città e delle loro periferie"
author: "Ivan Marino"
date: "2025-02-15"
categories: [analysis]
draft: true
---

```{r}
#| label: setup

library(tidyverse)
library(DBI)
library(duckdb)
library(duckplyr)
library(yaml)
library(showtext)
library(furrr)
library(LaplacesDemon)
library(arrow)

yaml.load_file("../../_brand.yml") |> 
  pluck("color", "palette") |> 
  enframe("x") |> 
  unnest(value) |> 
  pwalk(~assign(.x, .y, env = globalenv()))

font_name <- yaml.load_file("../../_brand.yml") |> 
  pluck("typography", "fonts", 1, "family")

font_add_google(font_name)
showtext_auto()

theme_set(theme_bw(base_family = font_name))

GeomSmooth$default_aes$colour <- blue
GeomSmooth$default_aes$fill <- gray
```

```{r}

con <- dbConnect(duckdb(), "../../duckdb", read_only = TRUE)
```

```{r}

n_provincie <- tbl(con, "sicurezza_e_degrado") |> 
  summarise(n = n_distinct(provincia)) |> 
  pull(n)
```

In giugno 2024 l'ISTAT ha pubblicato i dati di `{r} n_provincie` provincie italiane in merito a diversi indicatori demografici e socio-economici calcolati sulla base dei dati del Censimento permanente del 2021 suddivisi per aree subcomunali ([ISTAT](https://www.istat.it/audizioni/sicurezza-e-stato-di-degrado-delle-citta-e-delle-loro-periferie/)). I dati sono stati raccolti per valutare le condizioni di sicurezza e sullo stato di degrado delle città e delle loro periferie. Proviamo quindi ad esplorare insieme questo dataset per vedere cosa ne possiamo trarre di interessante.

# Impatto degli stranieri residenti sull'indice di vecchiaia

Nella @fig-incidenza-stranieri-vecchiaia è visualizzato l'andamento dell'indice di vecchiaia in funzione dell'incidenza dei residenti stranieri. L'incidenza dei residenti stranieri esprime il numero di cittadini stranieri ogni mille abitanti, mentre l'incidenza di vecchia è definito come numero di residenti over 64 ogni 100 residenti con meno di 15 anni. Si può notare che l'indice di vecchiaia è tendenzialmente in calo all'aumentare dell'incidenza straniera nelle varie aree subcomunali. I punti sono visualizzati con colori diversi in base alla provincia di appartenenza. Non risultano evidenti a prima vista delle differenze sostanziali da provincia a provincia, sia a livello di distribuzione di popolazione straniera che a livello di relazione tra quest'ultima e indice di vecchiaia.

```{r}
#| label: fig-incidenza-stranieri-vecchiaia
#| fig-cap: "Incidenza di residenti stranieri e indice di vecchiai delle diverse aree subcomunali"


tbl(con, "sicurezza_e_degrado") |>
  ggplot(aes(incidenza_dei_residenti_stranieri, indice_di_vecchiaia)) +
  geom_point(aes(color = provincia), alpha = 0.4) +
  labs(
    x = "Incidenza dei residenti stranieri",
    y = "Indice di vecchiaia"
    ) +
  scale_color_viridis_d() +
  geom_smooth() +
  theme(legend.position = "none")

```

```{r}

data <- tbl(con, "sicurezza_e_degrado") |>
  mutate(popolazione_residente_over64 = indice_di_vecchiaia * popolazione_residente_in_eta_0_14_anni / 100,
         popolazione_residente_in_eta_15_64_anni = popolazione_residente_totale - popolazione_residente_over64 - popolazione_residente_in_eta_0_14_anni,
         cittadini_residenti = popolazione_residente_totale - stranieri_residenti) |> 
  select(provincia_codice, cod_area, popolazione_residente_in_eta_0_14_anni, popolazione_residente_in_eta_15_64_anni, popolazione_residente_over64, cittadini_residenti, stranieri_residenti) |>
  collect() |> 
  drop_na()
```

```{r}

dmultinom <- function (x, size = NULL, prob, log = FALSE) {
  s <- sum(prob)
  prob <- prob/s
  r <- lgamma(size + 1) + colSums(t(x) * log(prob) - lgamma(t(x) + 1))
  if (log) 
    r
  else exp(r)
}
```

```{r}
#| cache: true

plan(multisession)


fit_completely_different <- data |>
  mutate(fit = future_pmap(
    list(ppolazione_residente_in_eta_0_14_anni,
         popolazione_residente_in_eta_15_64_anni,
         popolazione_residente_over64,
         cittadini_residenti,
         stranieri_residenti),
    \(z1, z2, z3, M, N) {
      
      z <- c(z1, z2, z3)
      
      sim <- matrix(nrow = 10000, ncol = 6)
      
      colnames(sim) <- str_c(rep(c( "p", "q"), c(3, 3)), rep(1:3, 2))
      
      LP <- double(10000)

      
      p <- sim[1, 1:3] <- z / (sum(M + N))
      q <- sim[1, 4:6] <- z / (sum(M + N))
      
      space <- expand_grid(
        x_1 = pmax(0, z[1] - N):pmin(M, z[1]),
        x_2 = (z[1] + z[2] - N - M):pmin(M, z[2])
      ) |> 
        filter(
          x_2 >= pmax(0, z[1] + z[2] - x_1 - N),
          x_2 <= pmin(M - x_1, z[2])
        ) |> 
        mutate(
          x = map2(x_1, x_2, ~c(.x, .y, M - .x - .y)),
          y = map(x, ~z - .)
        )
      
      space_x <- space$x |> 
        unlist() |> 
        matrix(ncol = 3, byrow = TRUE)
      
      space_y <- space$y |> 
        unlist() |> 
        matrix(ncol = 3, byrow = TRUE)
      
      
      prob <- dmultinom(space_x, M, p, log = TRUE) + dmultinom(space_y, N, q, log = TRUE)
      
      prob <- prob - max(prob)
      
      prob <- exp(prob)
      
      space_row_number <- sample(1:nrow(space_x), 1, prob = prob)
      
      x <- space_x[space_row_number, ]

      
      y <- z - x
      
      LP[1] <- ddirichlet(p, rep(1, 3), log = TRUE) +
        ddirichlet(q, rep(1, 3), log = TRUE) + 

        stats::dmultinom(x, M, p, log = TRUE) +
        stats::dmultinom(y, N, q, log = TRUE)
      
      
      
      for(i in 2:1000) {
        
        prob <- dmultinom(space_x, M, p, log = TRUE) + dmultinom(space_y, N, q, log = TRUE)
        
        prob <- prob - max(prob)
        
        prob <- exp(prob)
        
        space_row_number <- sample(1:nrow(space_x), 1, prob = prob)
        
        x <- space_x[space_row_number, ]

        
        y <- z - x
        
        
        p <- sim[i, 1:3] <- as.vector(rdirichlet(1, x + 1))
        q <- sim[i, 4:6] <- as.vector(rdirichlet(1, y + 1))
        
        LP[i] <- ddirichlet(p, rep(1, 3), log = TRUE) +
          ddirichlet(q, rep(1, 3), log = TRUE) + 

          dmultinom(x, M, p, log = TRUE) +
          dmultinom(y, N, q, log = TRUE)

        
      }
      
      LML <- LML(theta = sim[, -c(3, 6)], LL = LP)
      
      list(
        posterior = sim,
        LML = LML
      )
      
    },
    .progress = TRUE,
    .options = furrr_options(seed = TRUE)
  ))
```
